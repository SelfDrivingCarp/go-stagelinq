// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: proto/enginelibrary/library.proto

package enginelibrary

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BlobProviderType int32

const (
	BlobProviderType_BLOB_PROVIDER_TYPE_UNSPECIFIED    BlobProviderType = 0
	BlobProviderType_BLOB_PROVIDER_TYPE_ENGINE_DIRECT  BlobProviderType = 1
	BlobProviderType_BLOB_PROVIDER_TYPE_ENGINE_CONNECT BlobProviderType = 2
	BlobProviderType_BLOB_PROVIDER_TYPE_DROPBOX        BlobProviderType = 3
	BlobProviderType_BLOB_PROVIDER_TYPE_GOOGLE_DRIVE   BlobProviderType = 4
	BlobProviderType_BLOB_PROVIDER_TYPE_ONEDRIVE       BlobProviderType = 5
)

// Enum value maps for BlobProviderType.
var (
	BlobProviderType_name = map[int32]string{
		0: "BLOB_PROVIDER_TYPE_UNSPECIFIED",
		1: "BLOB_PROVIDER_TYPE_ENGINE_DIRECT",
		2: "BLOB_PROVIDER_TYPE_ENGINE_CONNECT",
		3: "BLOB_PROVIDER_TYPE_DROPBOX",
		4: "BLOB_PROVIDER_TYPE_GOOGLE_DRIVE",
		5: "BLOB_PROVIDER_TYPE_ONEDRIVE",
	}
	BlobProviderType_value = map[string]int32{
		"BLOB_PROVIDER_TYPE_UNSPECIFIED":    0,
		"BLOB_PROVIDER_TYPE_ENGINE_DIRECT":  1,
		"BLOB_PROVIDER_TYPE_ENGINE_CONNECT": 2,
		"BLOB_PROVIDER_TYPE_DROPBOX":        3,
		"BLOB_PROVIDER_TYPE_GOOGLE_DRIVE":   4,
		"BLOB_PROVIDER_TYPE_ONEDRIVE":       5,
	}
)

func (x BlobProviderType) Enum() *BlobProviderType {
	p := new(BlobProviderType)
	*p = x
	return p
}

func (x BlobProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_enginelibrary_library_proto_enumTypes[0].Descriptor()
}

func (BlobProviderType) Type() protoreflect.EnumType {
	return &file_proto_enginelibrary_library_proto_enumTypes[0]
}

func (x BlobProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobProviderType.Descriptor instead.
func (BlobProviderType) EnumDescriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{0}
}

type BlobType int32

const (
	BlobType_BLOB_TYPE_UNSPECIFIED BlobType = 0
	BlobType_BLOB_TYPE_TRACK_AUDIO BlobType = 1
)

// Enum value maps for BlobType.
var (
	BlobType_name = map[int32]string{
		0: "BLOB_TYPE_UNSPECIFIED",
		1: "BLOB_TYPE_TRACK_AUDIO",
	}
	BlobType_value = map[string]int32{
		"BLOB_TYPE_UNSPECIFIED": 0,
		"BLOB_TYPE_TRACK_AUDIO": 1,
	}
)

func (x BlobType) Enum() *BlobType {
	p := new(BlobType)
	*p = x
	return p
}

func (x BlobType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BlobType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_enginelibrary_library_proto_enumTypes[1].Descriptor()
}

func (BlobType) Type() protoreflect.EnumType {
	return &file_proto_enginelibrary_library_proto_enumTypes[1]
}

func (x BlobType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BlobType.Descriptor instead.
func (BlobType) EnumDescriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{1}
}

type InitialImportSource int32

const (
	InitialImportSource_INITIAL_IMPORT_SOURCE_UNSPECIFIED InitialImportSource = 0
	InitialImportSource_INITIAL_IMPORT_SOURCE_SERATO      InitialImportSource = 1
	InitialImportSource_INITIAL_IMPORT_SOURCE_REKORDBOX   InitialImportSource = 2
	InitialImportSource_INITIAL_IMPORT_SOURCE_TRAKTOR     InitialImportSource = 3
)

// Enum value maps for InitialImportSource.
var (
	InitialImportSource_name = map[int32]string{
		0: "INITIAL_IMPORT_SOURCE_UNSPECIFIED",
		1: "INITIAL_IMPORT_SOURCE_SERATO",
		2: "INITIAL_IMPORT_SOURCE_REKORDBOX",
		3: "INITIAL_IMPORT_SOURCE_TRAKTOR",
	}
	InitialImportSource_value = map[string]int32{
		"INITIAL_IMPORT_SOURCE_UNSPECIFIED": 0,
		"INITIAL_IMPORT_SOURCE_SERATO":      1,
		"INITIAL_IMPORT_SOURCE_REKORDBOX":   2,
		"INITIAL_IMPORT_SOURCE_TRAKTOR":     3,
	}
)

func (x InitialImportSource) Enum() *InitialImportSource {
	p := new(InitialImportSource)
	*p = x
	return p
}

func (x InitialImportSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InitialImportSource) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_enginelibrary_library_proto_enumTypes[2].Descriptor()
}

func (InitialImportSource) Type() protoreflect.EnumType {
	return &file_proto_enginelibrary_library_proto_enumTypes[2]
}

func (x InitialImportSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InitialImportSource.Descriptor instead.
func (InitialImportSource) EnumDescriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{2}
}

type LibraryLogo int32

const (
	LibraryLogo_LIBRARY_LOGO_UNSPECIFIED     LibraryLogo = 0
	LibraryLogo_LIBRARY_LOGO_ENGINE          LibraryLogo = 1
	LibraryLogo_LIBRARY_LOGO_APPLE_MUSIC_APP LibraryLogo = 2
	LibraryLogo_LIBRARY_LOGO_REKORDBOX       LibraryLogo = 3
	LibraryLogo_LIBRARY_LOGO_SERATO          LibraryLogo = 4
	LibraryLogo_LIBRARY_LOGO_TRAKTOR         LibraryLogo = 5
)

// Enum value maps for LibraryLogo.
var (
	LibraryLogo_name = map[int32]string{
		0: "LIBRARY_LOGO_UNSPECIFIED",
		1: "LIBRARY_LOGO_ENGINE",
		2: "LIBRARY_LOGO_APPLE_MUSIC_APP",
		3: "LIBRARY_LOGO_REKORDBOX",
		4: "LIBRARY_LOGO_SERATO",
		5: "LIBRARY_LOGO_TRAKTOR",
	}
	LibraryLogo_value = map[string]int32{
		"LIBRARY_LOGO_UNSPECIFIED":     0,
		"LIBRARY_LOGO_ENGINE":          1,
		"LIBRARY_LOGO_APPLE_MUSIC_APP": 2,
		"LIBRARY_LOGO_REKORDBOX":       3,
		"LIBRARY_LOGO_SERATO":          4,
		"LIBRARY_LOGO_TRAKTOR":         5,
	}
)

func (x LibraryLogo) Enum() *LibraryLogo {
	p := new(LibraryLogo)
	*p = x
	return p
}

func (x LibraryLogo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LibraryLogo) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_enginelibrary_library_proto_enumTypes[3].Descriptor()
}

func (LibraryLogo) Type() protoreflect.EnumType {
	return &file_proto_enginelibrary_library_proto_enumTypes[3]
}

func (x LibraryLogo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LibraryLogo.Descriptor instead.
func (LibraryLogo) EnumDescriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{3}
}

type ListType int32

const (
	ListType_LIST_TYPE_UNSPECIFIED ListType = 0
	ListType_LIST_TYPE_PLAY        ListType = 1
	ListType_LIST_TYPE_SMART       ListType = 2
)

// Enum value maps for ListType.
var (
	ListType_name = map[int32]string{
		0: "LIST_TYPE_UNSPECIFIED",
		1: "LIST_TYPE_PLAY",
		2: "LIST_TYPE_SMART",
	}
	ListType_value = map[string]int32{
		"LIST_TYPE_UNSPECIFIED": 0,
		"LIST_TYPE_PLAY":        1,
		"LIST_TYPE_SMART":       2,
	}
)

func (x ListType) Enum() *ListType {
	p := new(ListType)
	*p = x
	return p
}

func (x ListType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_enginelibrary_library_proto_enumTypes[4].Descriptor()
}

func (ListType) Type() protoreflect.EnumType {
	return &file_proto_enginelibrary_library_proto_enumTypes[4]
}

func (x ListType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListType.Descriptor instead.
func (ListType) EnumDescriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{4}
}

type BlobProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *BlobProviderType `protobuf:"varint,1,opt,name=type,proto3,enum=enginelibrary.v1.BlobProviderType,oneof" json:"type,omitempty"`
	Id   *string           `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
}

func (x *BlobProvider) Reset() {
	*x = BlobProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobProvider) ProtoMessage() {}

func (x *BlobProvider) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobProvider.ProtoReflect.Descriptor instead.
func (*BlobProvider) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{0}
}

func (x *BlobProvider) GetType() BlobProviderType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return BlobProviderType_BLOB_PROVIDER_TYPE_UNSPECIFIED
}

func (x *BlobProvider) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R *uint32 `protobuf:"varint,1,opt,name=r,proto3,oneof" json:"r,omitempty"`
	G *uint32 `protobuf:"varint,2,opt,name=g,proto3,oneof" json:"g,omitempty"`
	B *uint32 `protobuf:"varint,3,opt,name=b,proto3,oneof" json:"b,omitempty"`
	A *uint32 `protobuf:"varint,4,opt,name=a,proto3,oneof" json:"a,omitempty"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{1}
}

func (x *Color) GetR() uint32 {
	if x != nil && x.R != nil {
		return *x.R
	}
	return 0
}

func (x *Color) GetG() uint32 {
	if x != nil && x.G != nil {
		return *x.G
	}
	return 0
}

func (x *Color) GetB() uint32 {
	if x != nil && x.B != nil {
		return *x.B
	}
	return 0
}

func (x *Color) GetA() uint32 {
	if x != nil && x.A != nil {
		return *x.A
	}
	return 0
}

type Credentials struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessToken *string `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3,oneof" json:"access_token,omitempty"`
}

func (x *Credentials) Reset() {
	*x = Credentials{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Credentials) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credentials) ProtoMessage() {}

func (x *Credentials) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credentials.ProtoReflect.Descriptor instead.
func (*Credentials) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{2}
}

func (x *Credentials) GetAccessToken() string {
	if x != nil && x.AccessToken != nil {
		return *x.AccessToken
	}
	return ""
}

type HistorySession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       *string                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title                    *string                `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	TitleEventId             *uint64                `protobuf:"varint,5,opt,name=title_event_id,json=titleEventId,proto3,oneof" json:"title_event_id,omitempty"`
	StartTime                *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
	Timezone                 *string                `protobuf:"bytes,4,opt,name=timezone,proto3,oneof" json:"timezone,omitempty"`
	DeletedByEventId         *uint64                `protobuf:"varint,6,opt,name=deleted_by_event_id,json=deletedByEventId,proto3,oneof" json:"deleted_by_event_id,omitempty"`
	EstimatedDurationSeconds *uint32                `protobuf:"varint,7,opt,name=estimated_duration_seconds,json=estimatedDurationSeconds,proto3,oneof" json:"estimated_duration_seconds,omitempty"`
	PlayedTrackCount         *uint32                `protobuf:"varint,8,opt,name=played_track_count,json=playedTrackCount,proto3,oneof" json:"played_track_count,omitempty"`
}

func (x *HistorySession) Reset() {
	*x = HistorySession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistorySession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistorySession) ProtoMessage() {}

func (x *HistorySession) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistorySession.ProtoReflect.Descriptor instead.
func (*HistorySession) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{3}
}

func (x *HistorySession) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *HistorySession) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *HistorySession) GetTitleEventId() uint64 {
	if x != nil && x.TitleEventId != nil {
		return *x.TitleEventId
	}
	return 0
}

func (x *HistorySession) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *HistorySession) GetTimezone() string {
	if x != nil && x.Timezone != nil {
		return *x.Timezone
	}
	return ""
}

func (x *HistorySession) GetDeletedByEventId() uint64 {
	if x != nil && x.DeletedByEventId != nil {
		return *x.DeletedByEventId
	}
	return 0
}

func (x *HistorySession) GetEstimatedDurationSeconds() uint32 {
	if x != nil && x.EstimatedDurationSeconds != nil {
		return *x.EstimatedDurationSeconds
	}
	return 0
}

func (x *HistorySession) GetPlayedTrackCount() uint32 {
	if x != nil && x.PlayedTrackCount != nil {
		return *x.PlayedTrackCount
	}
	return 0
}

type HistoryPlayedTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedByEventId *uint64      `protobuf:"varint,1,opt,name=created_by_event_id,json=createdByEventId,proto3,oneof" json:"created_by_event_id,omitempty"`
	PlayedTrack      *PlayedTrack `protobuf:"bytes,2,opt,name=played_track,json=playedTrack,proto3,oneof" json:"played_track,omitempty"`
	DeletedByEventId *uint64      `protobuf:"varint,3,opt,name=deleted_by_event_id,json=deletedByEventId,proto3,oneof" json:"deleted_by_event_id,omitempty"`
}

func (x *HistoryPlayedTrack) Reset() {
	*x = HistoryPlayedTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryPlayedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryPlayedTrack) ProtoMessage() {}

func (x *HistoryPlayedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryPlayedTrack.ProtoReflect.Descriptor instead.
func (*HistoryPlayedTrack) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{4}
}

func (x *HistoryPlayedTrack) GetCreatedByEventId() uint64 {
	if x != nil && x.CreatedByEventId != nil {
		return *x.CreatedByEventId
	}
	return 0
}

func (x *HistoryPlayedTrack) GetPlayedTrack() *PlayedTrack {
	if x != nil {
		return x.PlayedTrack
	}
	return nil
}

func (x *HistoryPlayedTrack) GetDeletedByEventId() uint64 {
	if x != nil && x.DeletedByEventId != nil {
		return *x.DeletedByEventId
	}
	return 0
}

type Library struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *string      `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title *string      `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Logo  *LibraryLogo `protobuf:"varint,3,opt,name=logo,proto3,enum=enginelibrary.v1.LibraryLogo,oneof" json:"logo,omitempty"`
}

func (x *Library) Reset() {
	*x = Library{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Library) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Library) ProtoMessage() {}

func (x *Library) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Library.ProtoReflect.Descriptor instead.
func (*Library) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{5}
}

func (x *Library) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Library) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *Library) GetLogo() LibraryLogo {
	if x != nil && x.Logo != nil {
		return *x.Logo
	}
	return LibraryLogo_LIBRARY_LOGO_UNSPECIFIED
}

type ListTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata       *TrackMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	PreviewArtwork []byte         `protobuf:"bytes,4,opt,name=preview_artwork,json=previewArtwork,proto3,oneof" json:"preview_artwork,omitempty"`
}

func (x *ListTrack) Reset() {
	*x = ListTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTrack) ProtoMessage() {}

func (x *ListTrack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTrack.ProtoReflect.Descriptor instead.
func (*ListTrack) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{6}
}

func (x *ListTrack) GetMetadata() *TrackMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ListTrack) GetPreviewArtwork() []byte {
	if x != nil {
		return x.PreviewArtwork
	}
	return nil
}

type Loop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO - oneof _loop_in {
	LoopIn float64 `protobuf:"fixed64,2,opt,name=loop_in,json=loopIn,proto3" json:"loop_in,omitempty"`
	// }
	// TODO - oneof _loop_out {
	LoopOut float64 `protobuf:"fixed64,3,opt,name=loop_out,json=loopOut,proto3" json:"loop_out,omitempty"`
	// }
	Name         *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Color        *Color  `protobuf:"bytes,4,opt,name=color,proto3,oneof" json:"color,omitempty"`
	ActiveOnLoad *bool   `protobuf:"varint,5,opt,name=active_on_load,json=activeOnLoad,proto3,oneof" json:"active_on_load,omitempty"`
}

func (x *Loop) Reset() {
	*x = Loop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Loop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Loop) ProtoMessage() {}

func (x *Loop) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Loop.ProtoReflect.Descriptor instead.
func (*Loop) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{7}
}

func (x *Loop) GetLoopIn() float64 {
	if x != nil {
		return x.LoopIn
	}
	return 0
}

func (x *Loop) GetLoopOut() float64 {
	if x != nil {
		return x.LoopOut
	}
	return 0
}

func (x *Loop) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Loop) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *Loop) GetActiveOnLoad() bool {
	if x != nil && x.ActiveOnLoad != nil {
		return *x.ActiveOnLoad
	}
	return false
}

type MainCue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position        *float64 `protobuf:"fixed64,1,opt,name=position,proto3,oneof" json:"position,omitempty"`
	IsSetManually   *bool    `protobuf:"varint,2,opt,name=is_set_manually,json=isSetManually,proto3,oneof" json:"is_set_manually,omitempty"`
	InitialPosition *float64 `protobuf:"fixed64,3,opt,name=initial_position,json=initialPosition,proto3,oneof" json:"initial_position,omitempty"`
}

func (x *MainCue) Reset() {
	*x = MainCue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainCue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainCue) ProtoMessage() {}

func (x *MainCue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainCue.ProtoReflect.Descriptor instead.
func (*MainCue) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{8}
}

func (x *MainCue) GetPosition() float64 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *MainCue) GetIsSetManually() bool {
	if x != nil && x.IsSetManually != nil {
		return *x.IsSetManually
	}
	return false
}

func (x *MainCue) GetInitialPosition() float64 {
	if x != nil && x.InitialPosition != nil {
		return *x.InitialPosition
	}
	return 0
}

type PlayedTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayedTrackId *string                `protobuf:"bytes,1,opt,name=played_track_id,json=playedTrackId,proto3,oneof" json:"played_track_id,omitempty"`
	Metadata      *TrackMetadata         `protobuf:"bytes,2,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3,oneof" json:"start_time,omitempty"`
}

func (x *PlayedTrack) Reset() {
	*x = PlayedTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayedTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayedTrack) ProtoMessage() {}

func (x *PlayedTrack) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayedTrack.ProtoReflect.Descriptor instead.
func (*PlayedTrack) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{9}
}

func (x *PlayedTrack) GetPlayedTrackId() string {
	if x != nil && x.PlayedTrackId != nil {
		return *x.PlayedTrackId
	}
	return ""
}

func (x *PlayedTrack) GetMetadata() *TrackMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PlayedTrack) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

type PlaylistMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *string             `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title      *string             `protobuf:"bytes,2,opt,name=title,proto3,oneof" json:"title,omitempty"`
	TrackCount *uint32             `protobuf:"varint,3,opt,name=track_count,json=trackCount,proto3,oneof" json:"track_count,omitempty"`
	Playlists  []*PlaylistMetadata `protobuf:"bytes,4,rep,name=playlists,proto3" json:"playlists,omitempty"`
	ListType   *ListType           `protobuf:"varint,5,opt,name=list_type,json=listType,proto3,enum=enginelibrary.v1.ListType,oneof" json:"list_type,omitempty"`
}

func (x *PlaylistMetadata) Reset() {
	*x = PlaylistMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaylistMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaylistMetadata) ProtoMessage() {}

func (x *PlaylistMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaylistMetadata.ProtoReflect.Descriptor instead.
func (*PlaylistMetadata) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{10}
}

func (x *PlaylistMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *PlaylistMetadata) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *PlaylistMetadata) GetTrackCount() uint32 {
	if x != nil && x.TrackCount != nil {
		return *x.TrackCount
	}
	return 0
}

func (x *PlaylistMetadata) GetPlaylists() []*PlaylistMetadata {
	if x != nil {
		return x.Playlists
	}
	return nil
}

func (x *PlaylistMetadata) GetListType() ListType {
	if x != nil && x.ListType != nil {
		return *x.ListType
	}
	return ListType_LIST_TYPE_UNSPECIFIED
}

type QuickCue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     *string  `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Position *float64 `protobuf:"fixed64,2,opt,name=position,proto3,oneof" json:"position,omitempty"`
	Color    *Color   `protobuf:"bytes,3,opt,name=color,proto3,oneof" json:"color,omitempty"`
}

func (x *QuickCue) Reset() {
	*x = QuickCue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuickCue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuickCue) ProtoMessage() {}

func (x *QuickCue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuickCue.ProtoReflect.Descriptor instead.
func (*QuickCue) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{11}
}

func (x *QuickCue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *QuickCue) GetPosition() float64 {
	if x != nil && x.Position != nil {
		return *x.Position
	}
	return 0
}

func (x *QuickCue) GetColor() *Color {
	if x != nil {
		return x.Color
	}
	return nil
}

type SearchFilterValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *string `protobuf:"bytes,1,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *SearchFilterValue) Reset() {
	*x = SearchFilterValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFilterValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFilterValue) ProtoMessage() {}

func (x *SearchFilterValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFilterValue.ProtoReflect.Descriptor instead.
func (*SearchFilterValue) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{12}
}

func (x *SearchFilterValue) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type SearchFilterOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Genres  []*SearchFilterValue `protobuf:"bytes,1,rep,name=genres,proto3" json:"genres,omitempty"`
	Artists []*SearchFilterValue `protobuf:"bytes,2,rep,name=artists,proto3" json:"artists,omitempty"`
	Albums  []*SearchFilterValue `protobuf:"bytes,3,rep,name=albums,proto3" json:"albums,omitempty"`
	Bpms    []*SearchFilterValue `protobuf:"bytes,4,rep,name=bpms,proto3" json:"bpms,omitempty"`
	Keys    []*SearchFilterValue `protobuf:"bytes,5,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SearchFilterOptions) Reset() {
	*x = SearchFilterOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchFilterOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchFilterOptions) ProtoMessage() {}

func (x *SearchFilterOptions) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchFilterOptions.ProtoReflect.Descriptor instead.
func (*SearchFilterOptions) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{13}
}

func (x *SearchFilterOptions) GetGenres() []*SearchFilterValue {
	if x != nil {
		return x.Genres
	}
	return nil
}

func (x *SearchFilterOptions) GetArtists() []*SearchFilterValue {
	if x != nil {
		return x.Artists
	}
	return nil
}

func (x *SearchFilterOptions) GetAlbums() []*SearchFilterValue {
	if x != nil {
		return x.Albums
	}
	return nil
}

func (x *SearchFilterOptions) GetBpms() []*SearchFilterValue {
	if x != nil {
		return x.Bpms
	}
	return nil
}

func (x *SearchFilterOptions) GetKeys() []*SearchFilterValue {
	if x != nil {
		return x.Keys
	}
	return nil
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata        *TrackMetadata        `protobuf:"bytes,1,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	PerformanceData *TrackPerformanceData `protobuf:"bytes,2,opt,name=performance_data,json=performanceData,proto3,oneof" json:"performance_data,omitempty"`
	Location        *TrackLocation        `protobuf:"bytes,3,opt,name=location,proto3,oneof" json:"location,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{14}
}

func (x *Track) GetMetadata() *TrackMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Track) GetPerformanceData() *TrackPerformanceData {
	if x != nil {
		return x.PerformanceData
	}
	return nil
}

func (x *Track) GetLocation() *TrackLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type TrackBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*TrackBlob_Url
	Type isTrackBlob_Type `protobuf_oneof:"type"`
}

func (x *TrackBlob) Reset() {
	*x = TrackBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackBlob) ProtoMessage() {}

func (x *TrackBlob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackBlob.ProtoReflect.Descriptor instead.
func (*TrackBlob) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{15}
}

func (m *TrackBlob) GetType() isTrackBlob_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *TrackBlob) GetUrl() *TrackBlobUrl {
	if x, ok := x.GetType().(*TrackBlob_Url); ok {
		return x.Url
	}
	return nil
}

type isTrackBlob_Type interface {
	isTrackBlob_Type()
}

type TrackBlob_Url struct {
	Url *TrackBlobUrl `protobuf:"bytes,1,opt,name=url,proto3,oneof"`
}

func (*TrackBlob_Url) isTrackBlob_Type() {}

type TrackBlobUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url      *string `protobuf:"bytes,1,opt,name=url,proto3,oneof" json:"url,omitempty"`
	FileSize *uint32 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3,oneof" json:"file_size,omitempty"`
}

func (x *TrackBlobUrl) Reset() {
	*x = TrackBlobUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackBlobUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackBlobUrl) ProtoMessage() {}

func (x *TrackBlobUrl) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackBlobUrl.ProtoReflect.Descriptor instead.
func (*TrackBlobUrl) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{16}
}

func (x *TrackBlobUrl) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *TrackBlobUrl) GetFileSize() uint32 {
	if x != nil && x.FileSize != nil {
		return *x.FileSize
	}
	return 0
}

type TrackPerformanceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO - oneof _initial_import_source {
	InitialImportSource *InitialImportSource `protobuf:"varint,8,opt,name=initial_import_source,json=initialImportSource,proto3,enum=enginelibrary.v1.InitialImportSource,oneof" json:"initial_import_source,omitempty"`
	// }
	// TODO - oneof _bpm {
	Bpm *float64 `protobuf:"fixed64,9,opt,name=bpm,proto3,oneof" json:"bpm,omitempty"`
	// }
	Id               *string                                `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	BeatGrid         []byte                                 `protobuf:"bytes,3,opt,name=beat_grid,json=beatGrid,proto3,oneof" json:"beat_grid,omitempty"`
	QuickCues        []*TrackPerformanceData_QuickCuesEntry `protobuf:"bytes,4,rep,name=quick_cues,json=quickCues,proto3" json:"quick_cues,omitempty"`
	Loops            []*TrackPerformanceData_LoopsEntry     `protobuf:"bytes,5,rep,name=loops,proto3" json:"loops,omitempty"`
	MainCue          *MainCue                               `protobuf:"bytes,6,opt,name=main_cue,json=mainCue,proto3,oneof" json:"main_cue,omitempty"`
	OverviewWaveform []byte                                 `protobuf:"bytes,7,opt,name=overview_waveform,json=overviewWaveform,proto3,oneof" json:"overview_waveform,omitempty"`
}

func (x *TrackPerformanceData) Reset() {
	*x = TrackPerformanceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPerformanceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPerformanceData) ProtoMessage() {}

func (x *TrackPerformanceData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPerformanceData.ProtoReflect.Descriptor instead.
func (*TrackPerformanceData) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{17}
}

func (x *TrackPerformanceData) GetInitialImportSource() InitialImportSource {
	if x != nil && x.InitialImportSource != nil {
		return *x.InitialImportSource
	}
	return InitialImportSource_INITIAL_IMPORT_SOURCE_UNSPECIFIED
}

func (x *TrackPerformanceData) GetBpm() float64 {
	if x != nil && x.Bpm != nil {
		return *x.Bpm
	}
	return 0
}

func (x *TrackPerformanceData) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TrackPerformanceData) GetBeatGrid() []byte {
	if x != nil {
		return x.BeatGrid
	}
	return nil
}

func (x *TrackPerformanceData) GetQuickCues() []*TrackPerformanceData_QuickCuesEntry {
	if x != nil {
		return x.QuickCues
	}
	return nil
}

func (x *TrackPerformanceData) GetLoops() []*TrackPerformanceData_LoopsEntry {
	if x != nil {
		return x.Loops
	}
	return nil
}

func (x *TrackPerformanceData) GetMainCue() *MainCue {
	if x != nil {
		return x.MainCue
	}
	return nil
}

func (x *TrackPerformanceData) GetOverviewWaveform() []byte {
	if x != nil {
		return x.OverviewWaveform
	}
	return nil
}

type TrackMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO - oneof _bpm {
	Bpm *float64 `protobuf:"fixed64,6,opt,name=bpm,proto3,oneof" json:"bpm,omitempty"`
	// }
	// TODO - oneof _date_added {
	DateAdded *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=date_added,json=dateAdded,proto3,oneof" json:"date_added,omitempty"`
	// }
	Id            *string `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Title         *string `protobuf:"bytes,3,opt,name=title,proto3,oneof" json:"title,omitempty"`
	Artist        *string `protobuf:"bytes,4,opt,name=artist,proto3,oneof" json:"artist,omitempty"`
	Album         *string `protobuf:"bytes,5,opt,name=album,proto3,oneof" json:"album,omitempty"`
	Key           *string `protobuf:"bytes,7,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Rating        *uint32 `protobuf:"varint,8,opt,name=rating,proto3,oneof" json:"rating,omitempty"`
	Year          *uint32 `protobuf:"varint,9,opt,name=year,proto3,oneof" json:"year,omitempty"`
	Genre         *string `protobuf:"bytes,10,opt,name=genre,proto3,oneof" json:"genre,omitempty"`
	Comment       *string `protobuf:"bytes,11,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	Label         *string `protobuf:"bytes,12,opt,name=label,proto3,oneof" json:"label,omitempty"`
	LengthSeconds *uint32 `protobuf:"varint,13,opt,name=length_seconds,json=lengthSeconds,proto3,oneof" json:"length_seconds,omitempty"`
	Composer      *string `protobuf:"bytes,14,opt,name=composer,proto3,oneof" json:"composer,omitempty"`
	Remixer       *string `protobuf:"bytes,15,opt,name=remixer,proto3,oneof" json:"remixer,omitempty"`
}

func (x *TrackMetadata) Reset() {
	*x = TrackMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackMetadata) ProtoMessage() {}

func (x *TrackMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackMetadata.ProtoReflect.Descriptor instead.
func (*TrackMetadata) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{18}
}

func (x *TrackMetadata) GetBpm() float64 {
	if x != nil && x.Bpm != nil {
		return *x.Bpm
	}
	return 0
}

func (x *TrackMetadata) GetDateAdded() *timestamppb.Timestamp {
	if x != nil {
		return x.DateAdded
	}
	return nil
}

func (x *TrackMetadata) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *TrackMetadata) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

func (x *TrackMetadata) GetArtist() string {
	if x != nil && x.Artist != nil {
		return *x.Artist
	}
	return ""
}

func (x *TrackMetadata) GetAlbum() string {
	if x != nil && x.Album != nil {
		return *x.Album
	}
	return ""
}

func (x *TrackMetadata) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *TrackMetadata) GetRating() uint32 {
	if x != nil && x.Rating != nil {
		return *x.Rating
	}
	return 0
}

func (x *TrackMetadata) GetYear() uint32 {
	if x != nil && x.Year != nil {
		return *x.Year
	}
	return 0
}

func (x *TrackMetadata) GetGenre() string {
	if x != nil && x.Genre != nil {
		return *x.Genre
	}
	return ""
}

func (x *TrackMetadata) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *TrackMetadata) GetLabel() string {
	if x != nil && x.Label != nil {
		return *x.Label
	}
	return ""
}

func (x *TrackMetadata) GetLengthSeconds() uint32 {
	if x != nil && x.LengthSeconds != nil {
		return *x.LengthSeconds
	}
	return 0
}

func (x *TrackMetadata) GetComposer() string {
	if x != nil && x.Composer != nil {
		return *x.Composer
	}
	return ""
}

func (x *TrackMetadata) GetRemixer() string {
	if x != nil && x.Remixer != nil {
		return *x.Remixer
	}
	return ""
}

type TrackLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Provider *BlobProvider `protobuf:"bytes,1,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	Key      *string       `protobuf:"bytes,2,opt,name=key,proto3,oneof" json:"key,omitempty"`
}

func (x *TrackLocation) Reset() {
	*x = TrackLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackLocation) ProtoMessage() {}

func (x *TrackLocation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackLocation.ProtoReflect.Descriptor instead.
func (*TrackLocation) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{19}
}

func (x *TrackLocation) GetProvider() *BlobProvider {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *TrackLocation) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

type TrackPerformanceData_QuickCuesEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32   `protobuf:"varint,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *QuickCue `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *TrackPerformanceData_QuickCuesEntry) Reset() {
	*x = TrackPerformanceData_QuickCuesEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPerformanceData_QuickCuesEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPerformanceData_QuickCuesEntry) ProtoMessage() {}

func (x *TrackPerformanceData_QuickCuesEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPerformanceData_QuickCuesEntry.ProtoReflect.Descriptor instead.
func (*TrackPerformanceData_QuickCuesEntry) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{17, 0}
}

func (x *TrackPerformanceData_QuickCuesEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *TrackPerformanceData_QuickCuesEntry) GetValue() *QuickCue {
	if x != nil {
		return x.Value
	}
	return nil
}

type TrackPerformanceData_LoopsEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *uint32 `protobuf:"varint,1,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Value *Loop   `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *TrackPerformanceData_LoopsEntry) Reset() {
	*x = TrackPerformanceData_LoopsEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_enginelibrary_library_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPerformanceData_LoopsEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPerformanceData_LoopsEntry) ProtoMessage() {}

func (x *TrackPerformanceData_LoopsEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_enginelibrary_library_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPerformanceData_LoopsEntry.ProtoReflect.Descriptor instead.
func (*TrackPerformanceData_LoopsEntry) Descriptor() ([]byte, []int) {
	return file_proto_enginelibrary_library_proto_rawDescGZIP(), []int{17, 1}
}

func (x *TrackPerformanceData_LoopsEntry) GetKey() uint32 {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return 0
}

func (x *TrackPerformanceData_LoopsEntry) GetValue() *Loop {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_proto_enginelibrary_library_proto protoreflect.FileDescriptor

var file_proto_enginelibrary_library_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2f, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x70, 0x0a, 0x0c, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x11, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x01,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x01, 0x52, 0x01, 0x67, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x02, 0x52, 0x01, 0x62, 0x88, 0x01, 0x01, 0x12, 0x11, 0x0a, 0x01, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x01, 0x61, 0x88, 0x01, 0x01, 0x42, 0x04, 0x0a,
	0x02, 0x5f, 0x72, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x67, 0x42, 0x04, 0x0a, 0x02, 0x5f, 0x62, 0x42,
	0x04, 0x0a, 0x02, 0x5f, 0x61, 0x22, 0x46, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x84, 0x04,
	0x0a, 0x0e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02,
	0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x0e, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52,
	0x08, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x05, 0x52, 0x10, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x41, 0x0a, 0x1a, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x06, 0x52, 0x18, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x07, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x15, 0x0a,
	0x13, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x12, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x13, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x10, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x13, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x02, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x42, 0x79,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x07,
	0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x4c, 0x6f, 0x67, 0x6f, 0x48, 0x02, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x22, 0x9c, 0x01, 0x0a, 0x09, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x70, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x5f, 0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x41, 0x72, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x5f, 0x61, 0x72, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0xd8, 0x01, 0x0a, 0x04, 0x4c, 0x6f, 0x6f,
	0x70, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x06, 0x6c, 0x6f, 0x6f, 0x70, 0x49, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x6f,
	0x6f, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x6f,
	0x6f, 0x70, 0x4f, 0x75, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x32,
	0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4f, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a,
	0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xbd, 0x01, 0x0a, 0x07, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x0d, 0x69, 0x73, 0x53,
	0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a,
	0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x61, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x69,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x6c, 0x79, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x40, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x02, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x12,
	0x3c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x48, 0x03,
	0x52, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a,
	0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x08, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x48, 0x02, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x22, 0x38, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x19, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0xc0, 0x02, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x67, 0x65, 0x6e,
	0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x67, 0x65, 0x6e, 0x72, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x07, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x72,
	0x74, 0x69, 0x73, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x06, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x6c, 0x62, 0x75,
	0x6d, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x62, 0x70, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62, 0x70, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x6b, 0x65, 0x79, 0x73, 0x22, 0x92, 0x02, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x40,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01,
	0x12, 0x56, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x02, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x47, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x32, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62,
	0x55, 0x72, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x5d, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x62, 0x55,
	0x72, 0x6c, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x08,
	0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x86, 0x06, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x15, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x48, 0x00, 0x52, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x62, 0x70,
	0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x03, 0x62, 0x70, 0x6d, 0x88, 0x01,
	0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x62, 0x65, 0x61, 0x74, 0x5f, 0x67,
	0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x03, 0x52, 0x08, 0x62, 0x65, 0x61,
	0x74, 0x47, 0x72, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0a, 0x71, 0x75, 0x69, 0x63,
	0x6b, 0x5f, 0x63, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x75, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x09, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x75, 0x65, 0x73, 0x12, 0x47,
	0x0a, 0x05, 0x6c, 0x6f, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x6f, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x6c, 0x6f, 0x6f, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x63, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x69,
	0x6e, 0x43, 0x75, 0x65, 0x48, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x69, 0x6e, 0x43, 0x75, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x77,
	0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x05, 0x52,
	0x10, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x57, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72,
	0x6d, 0x88, 0x01, 0x01, 0x1a, 0x70, 0x0a, 0x0e, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x75, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x69, 0x63, 0x6b, 0x43, 0x75, 0x65, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x68, 0x0a, 0x0a, 0x4c, 0x6f, 0x6f, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x6f, 0x70, 0x48, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6d, 0x70,
	0x6f, 0x72, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x62,
	0x70, 0x6d, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x62, 0x65,
	0x61, 0x74, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x63, 0x75, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65,
	0x77, 0x5f, 0x77, 0x61, 0x76, 0x65, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x81, 0x05, 0x0a, 0x0d, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x03,
	0x62, 0x70, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x62, 0x70, 0x6d,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65,
	0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x19, 0x0a, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x05, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x48, 0x07, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12,
	0x17, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x08, 0x52,
	0x04, 0x79, 0x65, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x65, 0x6e, 0x72,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x05, 0x67, 0x65, 0x6e, 0x72, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x0b, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a,
	0x0e, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x0c, 0x52, 0x0d, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x08, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x72, 0x65,
	0x6d, 0x69, 0x78, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0e, 0x52, 0x07, 0x72,
	0x65, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x62, 0x70,
	0x6d, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x73, 0x74, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x61, 0x6c, 0x62, 0x75, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x65, 0x6e, 0x72, 0x65, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x72, 0x65, 0x6d, 0x69, 0x78, 0x65, 0x72, 0x22, 0x7c,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79, 0x2a, 0xe9, 0x01, 0x0a,
	0x10, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x22, 0x0a, 0x1e, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44,
	0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x42,
	0x4c, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x42, 0x4f, 0x58,
	0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45, 0x5f,
	0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x42, 0x4c, 0x4f, 0x42, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x4e,
	0x45, 0x44, 0x52, 0x49, 0x56, 0x45, 0x10, 0x05, 0x2a, 0x40, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x19, 0x0a, 0x15, 0x42, 0x4c, 0x4f, 0x42, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x52, 0x41,
	0x43, 0x4b, 0x5f, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x01, 0x2a, 0xa6, 0x01, 0x0a, 0x13, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4d,
	0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x49, 0x4e, 0x49,
	0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x4b, 0x4f, 0x52, 0x44, 0x42, 0x4f, 0x58, 0x10, 0x02,
	0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4d, 0x50, 0x4f,
	0x52, 0x54, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4b, 0x54, 0x4f,
	0x52, 0x10, 0x03, 0x2a, 0xb5, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4c,
	0x6f, 0x67, 0x6f, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4c,
	0x4f, 0x47, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4c, 0x49,
	0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x45,
	0x5f, 0x4d, 0x55, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x52, 0x45, 0x4b,
	0x4f, 0x52, 0x44, 0x42, 0x4f, 0x58, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x42, 0x52,
	0x41, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47, 0x4f, 0x5f, 0x53, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x47,
	0x4f, 0x5f, 0x54, 0x52, 0x41, 0x4b, 0x54, 0x4f, 0x52, 0x10, 0x05, 0x2a, 0x4e, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x52, 0x54, 0x10, 0x02, 0x42, 0x3b, 0x5a, 0x39, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x63, 0x65, 0x64, 0x72, 0x65,
	0x61, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x73, 0x74, 0x61, 0x67, 0x65, 0x6c, 0x69, 0x6e, 0x71, 0x2f,
	0x65, 0x61, 0x61, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_enginelibrary_library_proto_rawDescOnce sync.Once
	file_proto_enginelibrary_library_proto_rawDescData = file_proto_enginelibrary_library_proto_rawDesc
)

func file_proto_enginelibrary_library_proto_rawDescGZIP() []byte {
	file_proto_enginelibrary_library_proto_rawDescOnce.Do(func() {
		file_proto_enginelibrary_library_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_enginelibrary_library_proto_rawDescData)
	})
	return file_proto_enginelibrary_library_proto_rawDescData
}

var file_proto_enginelibrary_library_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_enginelibrary_library_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_proto_enginelibrary_library_proto_goTypes = []interface{}{
	(BlobProviderType)(0),                       // 0: enginelibrary.v1.BlobProviderType
	(BlobType)(0),                               // 1: enginelibrary.v1.BlobType
	(InitialImportSource)(0),                    // 2: enginelibrary.v1.InitialImportSource
	(LibraryLogo)(0),                            // 3: enginelibrary.v1.LibraryLogo
	(ListType)(0),                               // 4: enginelibrary.v1.ListType
	(*BlobProvider)(nil),                        // 5: enginelibrary.v1.BlobProvider
	(*Color)(nil),                               // 6: enginelibrary.v1.Color
	(*Credentials)(nil),                         // 7: enginelibrary.v1.Credentials
	(*HistorySession)(nil),                      // 8: enginelibrary.v1.HistorySession
	(*HistoryPlayedTrack)(nil),                  // 9: enginelibrary.v1.HistoryPlayedTrack
	(*Library)(nil),                             // 10: enginelibrary.v1.Library
	(*ListTrack)(nil),                           // 11: enginelibrary.v1.ListTrack
	(*Loop)(nil),                                // 12: enginelibrary.v1.Loop
	(*MainCue)(nil),                             // 13: enginelibrary.v1.MainCue
	(*PlayedTrack)(nil),                         // 14: enginelibrary.v1.PlayedTrack
	(*PlaylistMetadata)(nil),                    // 15: enginelibrary.v1.PlaylistMetadata
	(*QuickCue)(nil),                            // 16: enginelibrary.v1.QuickCue
	(*SearchFilterValue)(nil),                   // 17: enginelibrary.v1.SearchFilterValue
	(*SearchFilterOptions)(nil),                 // 18: enginelibrary.v1.SearchFilterOptions
	(*Track)(nil),                               // 19: enginelibrary.v1.Track
	(*TrackBlob)(nil),                           // 20: enginelibrary.v1.TrackBlob
	(*TrackBlobUrl)(nil),                        // 21: enginelibrary.v1.TrackBlobUrl
	(*TrackPerformanceData)(nil),                // 22: enginelibrary.v1.TrackPerformanceData
	(*TrackMetadata)(nil),                       // 23: enginelibrary.v1.TrackMetadata
	(*TrackLocation)(nil),                       // 24: enginelibrary.v1.TrackLocation
	(*TrackPerformanceData_QuickCuesEntry)(nil), // 25: enginelibrary.v1.TrackPerformanceData.QuickCuesEntry
	(*TrackPerformanceData_LoopsEntry)(nil),     // 26: enginelibrary.v1.TrackPerformanceData.LoopsEntry
	(*timestamppb.Timestamp)(nil),               // 27: google.protobuf.Timestamp
}
var file_proto_enginelibrary_library_proto_depIdxs = []int32{
	0,  // 0: enginelibrary.v1.BlobProvider.type:type_name -> enginelibrary.v1.BlobProviderType
	27, // 1: enginelibrary.v1.HistorySession.start_time:type_name -> google.protobuf.Timestamp
	14, // 2: enginelibrary.v1.HistoryPlayedTrack.played_track:type_name -> enginelibrary.v1.PlayedTrack
	3,  // 3: enginelibrary.v1.Library.logo:type_name -> enginelibrary.v1.LibraryLogo
	23, // 4: enginelibrary.v1.ListTrack.metadata:type_name -> enginelibrary.v1.TrackMetadata
	6,  // 5: enginelibrary.v1.Loop.color:type_name -> enginelibrary.v1.Color
	23, // 6: enginelibrary.v1.PlayedTrack.metadata:type_name -> enginelibrary.v1.TrackMetadata
	27, // 7: enginelibrary.v1.PlayedTrack.start_time:type_name -> google.protobuf.Timestamp
	15, // 8: enginelibrary.v1.PlaylistMetadata.playlists:type_name -> enginelibrary.v1.PlaylistMetadata
	4,  // 9: enginelibrary.v1.PlaylistMetadata.list_type:type_name -> enginelibrary.v1.ListType
	6,  // 10: enginelibrary.v1.QuickCue.color:type_name -> enginelibrary.v1.Color
	17, // 11: enginelibrary.v1.SearchFilterOptions.genres:type_name -> enginelibrary.v1.SearchFilterValue
	17, // 12: enginelibrary.v1.SearchFilterOptions.artists:type_name -> enginelibrary.v1.SearchFilterValue
	17, // 13: enginelibrary.v1.SearchFilterOptions.albums:type_name -> enginelibrary.v1.SearchFilterValue
	17, // 14: enginelibrary.v1.SearchFilterOptions.bpms:type_name -> enginelibrary.v1.SearchFilterValue
	17, // 15: enginelibrary.v1.SearchFilterOptions.keys:type_name -> enginelibrary.v1.SearchFilterValue
	23, // 16: enginelibrary.v1.Track.metadata:type_name -> enginelibrary.v1.TrackMetadata
	22, // 17: enginelibrary.v1.Track.performance_data:type_name -> enginelibrary.v1.TrackPerformanceData
	24, // 18: enginelibrary.v1.Track.location:type_name -> enginelibrary.v1.TrackLocation
	21, // 19: enginelibrary.v1.TrackBlob.url:type_name -> enginelibrary.v1.TrackBlobUrl
	2,  // 20: enginelibrary.v1.TrackPerformanceData.initial_import_source:type_name -> enginelibrary.v1.InitialImportSource
	25, // 21: enginelibrary.v1.TrackPerformanceData.quick_cues:type_name -> enginelibrary.v1.TrackPerformanceData.QuickCuesEntry
	26, // 22: enginelibrary.v1.TrackPerformanceData.loops:type_name -> enginelibrary.v1.TrackPerformanceData.LoopsEntry
	13, // 23: enginelibrary.v1.TrackPerformanceData.main_cue:type_name -> enginelibrary.v1.MainCue
	27, // 24: enginelibrary.v1.TrackMetadata.date_added:type_name -> google.protobuf.Timestamp
	5,  // 25: enginelibrary.v1.TrackLocation.provider:type_name -> enginelibrary.v1.BlobProvider
	16, // 26: enginelibrary.v1.TrackPerformanceData.QuickCuesEntry.value:type_name -> enginelibrary.v1.QuickCue
	12, // 27: enginelibrary.v1.TrackPerformanceData.LoopsEntry.value:type_name -> enginelibrary.v1.Loop
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_proto_enginelibrary_library_proto_init() }
func file_proto_enginelibrary_library_proto_init() {
	if File_proto_enginelibrary_library_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_enginelibrary_library_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Credentials); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistorySession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryPlayedTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Library); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Loop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainCue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayedTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaylistMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuickCue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFilterValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchFilterOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackBlobUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPerformanceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPerformanceData_QuickCuesEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_enginelibrary_library_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPerformanceData_LoopsEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_enginelibrary_library_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[12].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*TrackBlob_Url)(nil),
	}
	file_proto_enginelibrary_library_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_proto_enginelibrary_library_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_enginelibrary_library_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_enginelibrary_library_proto_goTypes,
		DependencyIndexes: file_proto_enginelibrary_library_proto_depIdxs,
		EnumInfos:         file_proto_enginelibrary_library_proto_enumTypes,
		MessageInfos:      file_proto_enginelibrary_library_proto_msgTypes,
	}.Build()
	File_proto_enginelibrary_library_proto = out.File
	file_proto_enginelibrary_library_proto_rawDesc = nil
	file_proto_enginelibrary_library_proto_goTypes = nil
	file_proto_enginelibrary_library_proto_depIdxs = nil
}
