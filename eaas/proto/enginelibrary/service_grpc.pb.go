// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/enginelibrary/service.proto

package enginelibrary

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EngineLibraryService_EventStream_FullMethodName            = "/enginelibrary.v1.EngineLibraryService/EventStream"
	EngineLibraryService_GetCredentials_FullMethodName         = "/enginelibrary.v1.EngineLibraryService/GetCredentials"
	EngineLibraryService_GetLibraries_FullMethodName           = "/enginelibrary.v1.EngineLibraryService/GetLibraries"
	EngineLibraryService_GetLibrary_FullMethodName             = "/enginelibrary.v1.EngineLibraryService/GetLibrary"
	EngineLibraryService_GetTracks_FullMethodName              = "/enginelibrary.v1.EngineLibraryService/GetTracks"
	EngineLibraryService_GetSearchFilters_FullMethodName       = "/enginelibrary.v1.EngineLibraryService/GetSearchFilters"
	EngineLibraryService_GetTrack_FullMethodName               = "/enginelibrary.v1.EngineLibraryService/GetTrack"
	EngineLibraryService_GetHistoryPlayedTracks_FullMethodName = "/enginelibrary.v1.EngineLibraryService/GetHistoryPlayedTracks"
	EngineLibraryService_GetHistorySessions_FullMethodName     = "/enginelibrary.v1.EngineLibraryService/GetHistorySessions"
	EngineLibraryService_PutEvents_FullMethodName              = "/enginelibrary.v1.EngineLibraryService/PutEvents"
	EngineLibraryService_SearchTracks_FullMethodName           = "/enginelibrary.v1.EngineLibraryService/SearchTracks"
)

// EngineLibraryServiceClient is the client API for EngineLibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EngineLibraryServiceClient interface {
	EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (*EventStreamResponse, error)
	GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error)
	GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error)
	GetLibrary(ctx context.Context, in *GetLibraryRequest, opts ...grpc.CallOption) (*GetLibraryResponse, error)
	GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksResponse, error)
	GetSearchFilters(ctx context.Context, in *GetSearchFiltersRequest, opts ...grpc.CallOption) (*GetSearchFiltersResponse, error)
	GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*GetTrackResponse, error)
	GetHistoryPlayedTracks(ctx context.Context, in *GetHistoryPlayedTracksRequest, opts ...grpc.CallOption) (*GetHistoryPlayedTracksResponse, error)
	GetHistorySessions(ctx context.Context, in *GetHistorySessionsRequest, opts ...grpc.CallOption) (*GetHistorySessionsResponse, error)
	PutEvents(ctx context.Context, in *PutEventsRequest, opts ...grpc.CallOption) (*PutEventsResponse, error)
	SearchTracks(ctx context.Context, in *SearchTracksRequest, opts ...grpc.CallOption) (*SearchTracksResponse, error)
}

type engineLibraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEngineLibraryServiceClient(cc grpc.ClientConnInterface) EngineLibraryServiceClient {
	return &engineLibraryServiceClient{cc}
}

func (c *engineLibraryServiceClient) EventStream(ctx context.Context, in *EventStreamRequest, opts ...grpc.CallOption) (*EventStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EventStreamResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_EventStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetCredentials(ctx context.Context, in *GetCredentialsRequest, opts ...grpc.CallOption) (*GetCredentialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCredentialsResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetCredentials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetLibraries(ctx context.Context, in *GetLibrariesRequest, opts ...grpc.CallOption) (*GetLibrariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLibrariesResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetLibraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetLibrary(ctx context.Context, in *GetLibraryRequest, opts ...grpc.CallOption) (*GetLibraryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLibraryResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetLibrary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetTracks(ctx context.Context, in *GetTracksRequest, opts ...grpc.CallOption) (*GetTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTracksResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetSearchFilters(ctx context.Context, in *GetSearchFiltersRequest, opts ...grpc.CallOption) (*GetSearchFiltersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSearchFiltersResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetSearchFilters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetTrack(ctx context.Context, in *GetTrackRequest, opts ...grpc.CallOption) (*GetTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTrackResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetHistoryPlayedTracks(ctx context.Context, in *GetHistoryPlayedTracksRequest, opts ...grpc.CallOption) (*GetHistoryPlayedTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistoryPlayedTracksResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetHistoryPlayedTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) GetHistorySessions(ctx context.Context, in *GetHistorySessionsRequest, opts ...grpc.CallOption) (*GetHistorySessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHistorySessionsResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_GetHistorySessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) PutEvents(ctx context.Context, in *PutEventsRequest, opts ...grpc.CallOption) (*PutEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutEventsResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_PutEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineLibraryServiceClient) SearchTracks(ctx context.Context, in *SearchTracksRequest, opts ...grpc.CallOption) (*SearchTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchTracksResponse)
	err := c.cc.Invoke(ctx, EngineLibraryService_SearchTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineLibraryServiceServer is the server API for EngineLibraryService service.
// All implementations must embed UnimplementedEngineLibraryServiceServer
// for forward compatibility.
type EngineLibraryServiceServer interface {
	EventStream(context.Context, *EventStreamRequest) (*EventStreamResponse, error)
	GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error)
	GetLibraries(context.Context, *GetLibrariesRequest) (*GetLibrariesResponse, error)
	GetLibrary(context.Context, *GetLibraryRequest) (*GetLibraryResponse, error)
	GetTracks(context.Context, *GetTracksRequest) (*GetTracksResponse, error)
	GetSearchFilters(context.Context, *GetSearchFiltersRequest) (*GetSearchFiltersResponse, error)
	GetTrack(context.Context, *GetTrackRequest) (*GetTrackResponse, error)
	GetHistoryPlayedTracks(context.Context, *GetHistoryPlayedTracksRequest) (*GetHistoryPlayedTracksResponse, error)
	GetHistorySessions(context.Context, *GetHistorySessionsRequest) (*GetHistorySessionsResponse, error)
	PutEvents(context.Context, *PutEventsRequest) (*PutEventsResponse, error)
	SearchTracks(context.Context, *SearchTracksRequest) (*SearchTracksResponse, error)
	mustEmbedUnimplementedEngineLibraryServiceServer()
}

// UnimplementedEngineLibraryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEngineLibraryServiceServer struct{}

func (UnimplementedEngineLibraryServiceServer) EventStream(context.Context, *EventStreamRequest) (*EventStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetCredentials(context.Context, *GetCredentialsRequest) (*GetCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCredentials not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetLibraries(context.Context, *GetLibrariesRequest) (*GetLibrariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibraries not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetLibrary(context.Context, *GetLibraryRequest) (*GetLibraryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLibrary not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetTracks(context.Context, *GetTracksRequest) (*GetTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTracks not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetSearchFilters(context.Context, *GetSearchFiltersRequest) (*GetSearchFiltersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSearchFilters not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetTrack(context.Context, *GetTrackRequest) (*GetTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetHistoryPlayedTracks(context.Context, *GetHistoryPlayedTracksRequest) (*GetHistoryPlayedTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistoryPlayedTracks not implemented")
}
func (UnimplementedEngineLibraryServiceServer) GetHistorySessions(context.Context, *GetHistorySessionsRequest) (*GetHistorySessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHistorySessions not implemented")
}
func (UnimplementedEngineLibraryServiceServer) PutEvents(context.Context, *PutEventsRequest) (*PutEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutEvents not implemented")
}
func (UnimplementedEngineLibraryServiceServer) SearchTracks(context.Context, *SearchTracksRequest) (*SearchTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTracks not implemented")
}
func (UnimplementedEngineLibraryServiceServer) mustEmbedUnimplementedEngineLibraryServiceServer() {}
func (UnimplementedEngineLibraryServiceServer) testEmbeddedByValue()                              {}

// UnsafeEngineLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EngineLibraryServiceServer will
// result in compilation errors.
type UnsafeEngineLibraryServiceServer interface {
	mustEmbedUnimplementedEngineLibraryServiceServer()
}

func RegisterEngineLibraryServiceServer(s grpc.ServiceRegistrar, srv EngineLibraryServiceServer) {
	// If the following call pancis, it indicates UnimplementedEngineLibraryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EngineLibraryService_ServiceDesc, srv)
}

func _EngineLibraryService_EventStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).EventStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_EventStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).EventStream(ctx, req.(*EventStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetCredentials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetCredentials(ctx, req.(*GetCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetLibraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibrariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetLibraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetLibraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetLibraries(ctx, req.(*GetLibrariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetLibrary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLibraryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetLibrary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetLibrary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetLibrary(ctx, req.(*GetLibraryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetTracks(ctx, req.(*GetTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetSearchFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSearchFiltersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetSearchFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetSearchFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetSearchFilters(ctx, req.(*GetSearchFiltersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetTrack(ctx, req.(*GetTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetHistoryPlayedTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryPlayedTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetHistoryPlayedTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetHistoryPlayedTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetHistoryPlayedTracks(ctx, req.(*GetHistoryPlayedTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_GetHistorySessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistorySessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).GetHistorySessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_GetHistorySessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).GetHistorySessions(ctx, req.(*GetHistorySessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_PutEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).PutEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_PutEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).PutEvents(ctx, req.(*PutEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineLibraryService_SearchTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineLibraryServiceServer).SearchTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EngineLibraryService_SearchTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineLibraryServiceServer).SearchTracks(ctx, req.(*SearchTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EngineLibraryService_ServiceDesc is the grpc.ServiceDesc for EngineLibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EngineLibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enginelibrary.v1.EngineLibraryService",
	HandlerType: (*EngineLibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EventStream",
			Handler:    _EngineLibraryService_EventStream_Handler,
		},
		{
			MethodName: "GetCredentials",
			Handler:    _EngineLibraryService_GetCredentials_Handler,
		},
		{
			MethodName: "GetLibraries",
			Handler:    _EngineLibraryService_GetLibraries_Handler,
		},
		{
			MethodName: "GetLibrary",
			Handler:    _EngineLibraryService_GetLibrary_Handler,
		},
		{
			MethodName: "GetTracks",
			Handler:    _EngineLibraryService_GetTracks_Handler,
		},
		{
			MethodName: "GetSearchFilters",
			Handler:    _EngineLibraryService_GetSearchFilters_Handler,
		},
		{
			MethodName: "GetTrack",
			Handler:    _EngineLibraryService_GetTrack_Handler,
		},
		{
			MethodName: "GetHistoryPlayedTracks",
			Handler:    _EngineLibraryService_GetHistoryPlayedTracks_Handler,
		},
		{
			MethodName: "GetHistorySessions",
			Handler:    _EngineLibraryService_GetHistorySessions_Handler,
		},
		{
			MethodName: "PutEvents",
			Handler:    _EngineLibraryService_PutEvents_Handler,
		},
		{
			MethodName: "SearchTracks",
			Handler:    _EngineLibraryService_SearchTracks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/enginelibrary/service.proto",
}
