package eaas

import (
	"bufio"
	"bytes"
	"testing"

	"github.com/icedream/go-stagelinq/internal/messages"
	"github.com/stretchr/testify/require"
)

var testMessages = []struct {
	Name          string
	Message       messages.Message
	CreateMessage func() messages.Message
	Bytes         []byte
}{
	{
		Name: "EAAS discovery request",
		Bytes: []byte{
			0x45, 0x41, 0x41, 0x53, 0x01, 0x00,
		},
		CreateMessage: func() messages.Message { return new(eaasDiscoveryRequestMessage) },
		Message:       &eaasDiscoveryRequestMessage{},
	},
	{
		Name: "EAAS discovery response",
		Bytes: []byte{
			0x45, 0x41, 0x41, 0x53, 0x01, 0x01, 0x79, 0x9b,
			0x2d, 0xab, 0xf7, 0xc7, 0x43, 0x63, 0xb4, 0x9c,
			0x59, 0xe1, 0x91, 0x16, 0x89, 0x9e, 0x00, 0x00,
			0x00, 0x24, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65,
			0x00, 0x64, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61,
			0x00, 0x6d, 0x00, 0x2d, 0x00, 0x66, 0x00, 0x72,
			0x00, 0x61, 0x00, 0x6d, 0x00, 0x65, 0x00, 0x77,
			0x00, 0x6f, 0x00, 0x72, 0x00, 0x6b, 0x00, 0x00,
			0x00, 0x1c, 0x67, 0x72, 0x70, 0x63, 0x3a, 0x2f,
			0x2f, 0x31, 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38,
			0x2e, 0x31, 0x38, 0x38, 0x2e, 0x31, 0x32, 0x30,
			0x3a, 0x35, 0x30, 0x30, 0x31, 0x30, 0x00, 0x00,
			0x00, 0x20, 0x00, 0x33, 0x00, 0x2e, 0x00, 0x34,
			0x00, 0x2e, 0x00, 0x30, 0x00, 0x2e, 0x00, 0x66,
			0x00, 0x36, 0x00, 0x62, 0x00, 0x33, 0x00, 0x64,
			0x00, 0x63, 0x00, 0x32, 0x00, 0x63, 0x00, 0x32,
			0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00,
			0x5f,
		},
		CreateMessage: func() messages.Message { return new(eaasDiscoveryResponseMessage) },
		Message: &eaasDiscoveryResponseMessage{
			TokenPrefixedMessage: messages.TokenPrefixedMessage{
				Token: messages.Token{0x79, 0x9b, 0x2d, 0xab, 0xf7, 0xc7, 0x43, 0x63, 0xb4, 0x9c, 0x59, 0xe1, 0x91, 0x16, 0x89, 0x9e},
			},
			Hostname:        "icedream-framework",
			SoftwareVersion: "3.4.0.f6b3dc2c20",
			URL:             "grpc://192.168.188.120:50010",
			Extra:           "_",
		},
	},
}

func Test_Messages_Read(t *testing.T) {
	for _, test := range testMessages {
		def := test
		t.Run(test.Name, func(t *testing.T) {
			r := bytes.NewReader(def.Bytes)
			m := def.CreateMessage()
			err := m.ReadMessageFrom(r)
			require.NoError(t, err)
			require.Equal(t, def.Message, m)
		})
	}
}

func Test_Messages_Write(t *testing.T) {
	for _, test := range testMessages {
		def := test
		t.Run(test.Name, func(t *testing.T) {
			buf := new(bytes.Buffer)
			err := def.Message.WriteMessageTo(buf)
			require.NoError(t, err)
			resultBytes := buf.Bytes()
			require.Equal(t, def.Bytes, resultBytes)
		})
	}
}

func Test_Messages_CheckMatch(t *testing.T) {
	for _, test := range testMessages {
		def := test
		t.Run(test.Name, func(t *testing.T) {
			ok, err := def.Message.CheckMatch(bufio.NewReader(bytes.NewReader(def.Bytes)))
			require.NoError(t, err)
			require.True(t, ok)
		})
	}
}
