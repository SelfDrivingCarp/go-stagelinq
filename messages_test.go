package stagelinq

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/require"
)

var testMessages = []struct {
	Message       message
	CreateMessage func() message
	Bytes         []byte
}{
	{
		Bytes: []byte{
			/*0x61, 0x69, 0x72, 0x44,*/ 0xf4, 0x05, 0xdc, 0x14,
			0x02, 0x23, 0x47, 0xf5, 0x8b, 0x79, 0x2c, 0x8c,
			0x49, 0x33, 0x52, 0x76, 0x00, 0x00, 0x00, 0x0c,
			0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6d,
			0x00, 0x65, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22,
			0x00, 0x44, 0x00, 0x49, 0x00, 0x53, 0x00, 0x43,
			0x00, 0x4f, 0x00, 0x56, 0x00, 0x45, 0x00, 0x52,
			0x00, 0x45, 0x00, 0x52, 0x00, 0x5f, 0x00, 0x48,
			0x00, 0x4f, 0x00, 0x57, 0x00, 0x44, 0x00, 0x59,
			0x00, 0x5f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4a,
			0x00, 0x43, 0x00, 0x31, 0x00, 0x31, 0x00, 0x00,
			0x00, 0x0a, 0x00, 0x31, 0x00, 0x2e, 0x00, 0x35,
			0x00, 0x2e, 0x00, 0x32, 0x84, 0x03,
		},
		CreateMessage: func() message { return new(DiscoveryMessage) },
		Message: &DiscoveryMessage{
			tokenPrefixedMessage: tokenPrefixedMessage{
				Token: [16]byte{0xf4, 0x05, 0xdc, 0x14, 0x02, 0x23, 0x47, 0xf5, 0x8b, 0x79, 0x2c, 0x8c, 0x49, 0x33, 0x52, 0x76},
			},
			Source:          "prime4",
			Action:          DiscovererHowdy,
			SoftwareName:    "JC11",
			SoftwareVersion: "1.5.2",
			Port:            0x8403,
		},
	},
	{
		Bytes: []byte{
			/*0x00, 0x00, 0x00, 0x00,*/ 0x52, 0x3e, 0x67, 0x9d,
			0xa4, 0x18, 0x4d, 0x1e, 0x83, 0xd0, 0xc7, 0x52,
			0xcf, 0xca, 0x8f, 0xf7, 0x00, 0x00, 0x00, 0x10,
			0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74,
			0x00, 0x65, 0x00, 0x4d, 0x00, 0x61, 0x00, 0x70,
			0xe1, 0x96,
		},
		CreateMessage: func() message { return new(ServiceAnnouncementMessage) },
		Message: &ServiceAnnouncementMessage{
			tokenPrefixedMessage: tokenPrefixedMessage{
				Token: [16]byte{0x52, 0x3e, 0x67, 0x9d, 0xa4, 0x18, 0x4d, 0x1e, 0x83, 0xd0, 0xc7, 0x52, 0xcf, 0xca, 0x8f, 0xf7},
			},
			Service: "StateMap",
			Port:    0xe196,
		},
	},
	{
		Bytes: []byte{
			/*0x00, 0x00, 0x00, 0x02,*/ 0xf4, 0x05, 0xdc, 0x14,
			0x02, 0x23, 0x47, 0xf5, 0x8b, 0x79, 0x2c, 0x8c,
			0x49, 0x33, 0x52, 0x76,
		},
		CreateMessage: func() message { return new(EmptyMessage) },
		Message: &EmptyMessage{
			tokenPrefixedMessage: tokenPrefixedMessage{
				Token: [16]byte{0xf4, 0x05, 0xdc, 0x14, 0x02, 0x23, 0x47, 0xf5, 0x8b, 0x79, 0x2c, 0x8c, 0x49, 0x33, 0x52, 0x76},
			},
		},
	},
	{
		Bytes: []byte{
			/*0x00, 0x00, 0x00, 0x01,*/ 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xf4, 0x05, 0xdc, 0x14,
			0x02, 0x23, 0x47, 0xf5, 0x8b, 0x79, 0x2c, 0x8c,
			0x49, 0x33, 0x52, 0x76, 0x00, 0x00, 0x09, 0xed,
			0x4f, 0x31, 0x06, 0x04,
		},
		CreateMessage: func() message { return new(PingMessage) },
		Message: &PingMessage{
			tokenPrefixedMessage: tokenPrefixedMessage{
				Token: [16]byte{},
			},
			Token2: [16]byte{0xf4, 0x05, 0xdc, 0x14, 0x02, 0x23, 0x47, 0xf5, 0x8b, 0x79, 0x2c, 0x8c, 0x49, 0x33, 0x52, 0x76},
			Data:   []byte{0x00, 0x00, 0x09, 0xed, 0x4f, 0x31, 0x06, 0x04},
		},
	},
}

func Test_Messages_Read(t *testing.T) {
	for _, def := range testMessages {
		r := bytes.NewReader(def.Bytes)
		m := def.CreateMessage()
		err := m.readFrom(r)
		require.Nil(t, err)
		require.Equal(t, def.Message, m)
	}
}

func Test_Messages_Write(t *testing.T) {
	for _, def := range testMessages {
		buf := new(bytes.Buffer)
		err := def.Message.writeTo(buf)
		require.Nil(t, err)
		resultBytes := buf.Bytes()
		require.Equal(t, def.Bytes, resultBytes)
	}
}
